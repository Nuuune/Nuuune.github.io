<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[node服务器接收前端参数的坑]]></title>
      <url>/2018/node%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8E%A5%E6%94%B6%E5%89%8D%E7%AB%AF%E5%8F%82%E6%95%B0%E7%9A%84%E5%9D%91/</url>
      <content type="html"><![CDATA[<p>在写后台时发现<code>req.body</code>取不到前端传过来的参数，后来发现是参数类型的问题，<br>特此记录<br><a id="more"></a></p>
<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>开始用<strong> POSTMAN </strong> 插件时测试接口发现参数都没问题<br><code>req.body</code> 能够取到传来参数值<br>而实际用到自己的前端项目上时发现后台取不到传来的参数了<br>前端采用的是<strong> axios.js </strong> 插件来进行HTTP请求的，<br>通过浏览器debug可以发现请求里参数全都在<strong> Request Payload </strong> 之下<br>所以通过<code>req.body</code>取不到了</p>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>解决方法可以通过以下类似代码解决：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求处理</span></span><br><span class="line"><span class="keyword">var</span> reqBody = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">""</span>;</span><br><span class="line">req.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">  str += chunk;</span><br><span class="line">&#125;);</span><br><span class="line">req.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  reqBody = <span class="built_in">JSON</span>.parse(str);</span><br><span class="line">  <span class="comment">//省略</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>这是由于</p>
<blockquote>
<p>Request Payload方式是以“流“”的方式出入到后台，需要监听data事件来获取完整的数据。</p>
</blockquote>
<p>借鉴<a href="http://www.cnblogs.com/hsp-blog/p/5919877.html" target="_blank" rel="noopener">此处</a></p>
]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> node.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[html-webpack-plugin 中使用jade/pug模板]]></title>
      <url>/2018/html-webpack-plugin-%E4%B8%AD%E4%BD%BF%E7%94%A8jade-pug%E6%A8%A1%E6%9D%BF/</url>
      <content type="html"><![CDATA[<p>关于 <em> html-webpack-plugin </em> 使用自定义模板的传参问题<br><a id="more"></a></p>
<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>由于此插件的默认使用是<em> .ejs </em> 的模板引擎<br>所以它编译时针对此模板已将此插件的<em> options </em> 传入了模板<br>于是便可以向如下直接使用<br><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- default_index.ejs --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby"> htmlWebpackPlugin.options.title </span><span class="xml"><span class="tag">%&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>其中<em> htmlWebpackPlugin.options.title </em> 就是传入的变量</p>
<p>而当使用其他模板时是获取不到这个变量的，那么应该如何实现？</p>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>对于<em> jade/pug </em> 模板<br>由于网上搜索很少这方面解决方案<br>通过了解webpack文档<br>可以通过loader加载器对其进行传参<br>如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin_option = &#123;</span><br><span class="line">  <span class="comment">// ··· 省略一些其他设置</span></span><br><span class="line">  title = <span class="string">"标题"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ···省略 ···</span></span><br><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.pug$/</span>,</span><br><span class="line">  use: [</span><br><span class="line">        &#123; <span class="attr">loader</span>: <span class="string">'html-loader'</span> &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          loader: <span class="string">'pug-html-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            data: &#123;</span><br><span class="line">              user: <span class="string">'sss'</span>,</span><br><span class="line">              htmlWebpackPlugin: &#123;</span><br><span class="line">                options: HtmlWebpackPlugin_option</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上面是wepack的module部分配置<br>需要传入的参数通过<em> options.data </em> 来传入<br>如上传入了一个<em> user </em> 、<em> htmlWebpackPlugin </em> 两个变量<br>其中_ HtmlWebpackPlugin<em>option </em> 是html-webpack-plugin的options对象</p>
<p>通过这样的配置就可以在<em> jade/pug </em> 模板中使用传入的参数了<br>如下</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">doctype html</span><br><span class="line"><span class="function"><span class="title">html</span><span class="params">(lang=<span class="string">"en"</span>)</span></span></span><br><span class="line">  head</span><br><span class="line">    title #&#123;htmlWebpackPlugin<span class="selector-class">.options</span><span class="selector-class">.title</span>&#125;</span><br><span class="line">    meta(charset=<span class="string">"utf-8"</span>)</span><br><span class="line">  body</span><br><span class="line">    <span class="selector-tag">h1</span> #&#123;user&#125;</span><br></pre></td></tr></table></figure>
<p>编译后<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>sss<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 构建工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> webpack插件 </tag>
            
            <tag> jade </tag>
            
            <tag> pug </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue-开发表单组件遇到的问题]]></title>
      <url>/2018/Vue-%E5%BC%80%E5%8F%91%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>在写表单组件时，想写一个从父元素传来表单所需的组件类型，<br>通过computed属性来初始化表单各子输入框的基本类型及数据</p>
<p>写的过程中出现了computed初始化表单数据并没有双向绑定的<br>问题，对此进行分析记录<br><a id="more"></a></p>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//简单demo,'co'是父组件传来的参数并计算得到的computed属性</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-text</span>=<span class="string">"co.text"</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"co.text"</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"show"</span>&gt;</span>show co<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//部分script</span><br><span class="line">computed: &#123;</span><br><span class="line">  co () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      text: "co"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">  show () &#123;</span><br><span class="line">    console.log(this.co.text)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>效果如下：<br><img src="/imgs/0123.gif" alt="效果图 1.1"></p>
<p><strong> 分析 </strong><br>从上图可以看出，初始渲染是没有问题的，但是当改变输入框的值时， <code>this.co.text</code> 是跟着改变了，但是却没有在<code>&lt;h3&gt;</code>标签上渲染出来</p>
<p>查询官网，推荐使用data对象，因为在Vue实例化时，会对data对象进行setter/getter的转换，而computed属性不会，只有转换为setter/getter才能被watch观察，更新，重新渲染，所以使用computed属性进行绑定是不会达到响应式的<br>具体可以参考官方文档 <a href="https://cn.vuejs.org/v2/guide/reactivity.html#%E5%A6%82%E4%BD%95%E8%BF%BD%E8%B8%AA%E5%8F%98%E5%8C%96" target="_blank" rel="noopener">Vue 深入响应式原理</a></p>
<p><strong> 解决方案 </strong><br>将computed属性的对象地址，赋给data对象的属性中</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">//改为直接从data中拿值渲染，到达响应</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-text</span>=<span class="string">"dataCo.text"</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"dataCo.text"</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"show"</span>&gt;</span>show co<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//部分script</span><br><span class="line"></span><br><span class="line">+data () &#123;</span><br><span class="line">+  return &#123;</span><br><span class="line">+    dataCo: null</span><br><span class="line">+  &#125;</span><br><span class="line">+&#125;,</span><br><span class="line"></span><br><span class="line">computed: &#123;</span><br><span class="line">  co () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      text: "co"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">  show () &#123;</span><br><span class="line">    console.log(this.co.text)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">//需要在数据加载完后赋值</span><br><span class="line">+created () &#123;</span><br><span class="line">+  this.dataCo = this.co;</span><br><span class="line">+&#125;</span><br></pre></td></tr></table></figure>
<p><em> 注意: </em> 通过此操作之后，<code>co</code> 与 <code>dataCo</code>是同步一起了，因为它们都是指向了同一个对象的地址 </p>
]]></content>
      
        <categories>
            
            <category> 框架 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vue </tag>
            
            <tag> computed属性 </tag>
            
            <tag> data属性 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue 异步数据渲染]]></title>
      <url>/2018/Vue-%E5%BC%82%E6%AD%A5%E6%95%B0%E6%8D%AE%E6%B8%B2%E6%9F%93/</url>
      <content type="html"><![CDATA[<p>使用 <em> Vue </em> 的时候遇到了异步数据渲染错误的问题。<br><strong> 原因： </strong> 渲染前没有传入渲染所需参数所导致。<br><a id="more"></a></p>
<hr>
<h3 id="1-例子"><a href="#1-例子" class="headerlink" title="1.例子"></a>1.例子</h3><h4 id="父组件"><a href="#父组件" class="headerlink" title="父组件"></a>父组件</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//用getData自身的数据模拟异步数据</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">:dataList</span>=<span class="string">"dataList"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">getData</span> @<span class="attr">upData</span>=<span class="string">"getChildData"</span>&gt;</span><span class="tag">&lt;/<span class="name">getData</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//部分script</span><br><span class="line">data () &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    dataList: null</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">  getChildData(val)&#123;</span><br><span class="line">    this.dataList = val;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="child-vue"><a href="#child-vue" class="headerlink" title="child.vue"></a>child.vue</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;dataList[0].msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//script</span><br><span class="line">props: ['dataList']</span><br></pre></td></tr></table></figure>
<h4 id="getData-vue"><a href="#getData-vue" class="headerlink" title="getData.vue"></a>getData.vue</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"updata"</span>&gt;</span>获取数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//script</span><br><span class="line">data () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">          asynData: [&#123;msg:"1"&#125;,&#123;msg:"2"&#125;]</span><br><span class="line">      &#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  updata()&#123;</span><br><span class="line">    console.log(this.asynData);</span><br><span class="line">    this.$emit('upData', this.asynData)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行时，报错</p>
<blockquote>
<p>TypeError: Cannot read property ‘0’ of null</p>
</blockquote>
<h3 id="2-解决"><a href="#2-解决" class="headerlink" title="2.解决"></a>2.解决</h3><p>自己作demo时出现这类似的错误，当时用了最“笨”的方法，初始化参数(但是 <strong> 参数为对象 </strong> 时不是太理想)</p>
<p>后来查阅网上资料发现只需要对用异步数据进行一个 <em> v-if </em> 判断来加载组件即可</p>
<p>对于上面例子，只要进行父组件的修改</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">-    <span class="tag">&lt;<span class="name">child</span> <span class="attr">:dataList</span>=<span class="string">"dataList"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">+    <span class="tag">&lt;<span class="name">child</span> <span class="attr">v-if</span>=<span class="string">"dataList"</span> <span class="attr">:dataList</span>=<span class="string">"dataList"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">getData</span> @<span class="attr">upData</span>=<span class="string">"getChildData"</span>&gt;</span><span class="tag">&lt;/<span class="name">getData</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 框架 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 异步数据 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[日常小坑(Array.prototype.fill)]]></title>
      <url>/2017/%E6%97%A5%E5%B8%B8%E5%B0%8F%E5%9D%91/</url>
      <content type="html"><![CDATA[<p>当参数为对象时，此数组里的每一项都是这个对象的引用<br>当遍历改变此数组里的对象时，所有数组项同时改变</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = <span class="built_in">Array</span>(<span class="number">20</span>).fill(&#123; <span class="attr">url</span>: <span class="string">"xxx"</span>, id=<span class="number">-1</span>&#125;);</span><br><span class="line">list.forEach(<span class="function">(<span class="params">curr, index</span>) =&gt;</span> &#123;</span><br><span class="line">  curr.id = index;</span><br><span class="line">&#125;); </span><br><span class="line"></span><br><span class="line">list.forEach(<span class="function">(<span class="params">curr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(curr.id);    <span class="comment">//所有输出都为19</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用CSS去掉双击后的蓝色背景]]></title>
      <url>/2017/%E7%94%A8CSS%E5%8E%BB%E6%8E%89%E5%8F%8C%E5%87%BB%E5%90%8E%E7%9A%84%E8%93%9D%E8%89%B2%E8%83%8C%E6%99%AF/</url>
      <content type="html"><![CDATA[<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.elements</span> &#123;</span><br><span class="line">  <span class="attribute">-moz-user-select</span>: none;  <span class="comment">/* firefox */</span></span><br><span class="line">  <span class="attribute">-webkit-user-select</span>: none;  <span class="comment">/* webkit */</span></span><br><span class="line">  <span class="attribute">-ms-user-select</span>: none;  <span class="comment">/* IE10+ */</span></span><br><span class="line">  <span class="attribute">-khtml-user-select</span>: none;  <span class="comment">/* 早期浏览器 */</span></span><br><span class="line">  <span class="attribute">user-select</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS学习(数据类型)]]></title>
      <url>/2016/JS%E5%AD%A6%E4%B9%A0-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<p>初入前端，JS作为前端三剑客中的一员，是必须要了解且精通的。<br>学习参考书：<a href="http://javascript.ruanyifeng.com/" target="_blank" rel="noopener">《JavaScript 标准参考教程（alpha）》</a>，by 阮一峰</p>
<p>此《JS学习》系列为对参考书进行学习的日志，作为本人的<em>学习笔记</em><br><a id="more"></a></p>
<hr>
<h2 id="引导"><a href="#引导" class="headerlink" title="引导"></a>引导</h2><ul>
<li><a href="#ar1">六种数据类型</a></li>
<li><a href="#ar2">判断数据类型的方法</a></li>
<li><a href="#ar3">数值类型(Number)</a></li>
</ul>
<p><a name="ar1"></a></p>
<h3 id="六种数据类型"><a href="#六种数据类型" class="headerlink" title="六种数据类型"></a>六种数据类型</h3><ul>
<li>数值（number）：整数和小数（比如1和3.14）</li>
<li>字符串（string）：文本（比如Hello World）。</li>
<li>布尔值（boolean）：表示真伪的两个特殊值，即true（真）和false（假）</li>
<li>undefined：表示“未定义”或不存在，即由于目前没有定义，所以此处暂时没有任何值</li>
<li>null：表示空值，即此处的值为空。</li>
<li>对象（object）：各种值组成的集合。</li>
</ul>
<p><em>对象又分为<code>object</code>(狭义对象) <code>array</code>(数组) <code>function</code>(方法)</em></p>
<p><a name="ar2"></a></p>
<h3 id="判断数据类型的方法"><a href="#判断数据类型的方法" class="headerlink" title="判断数据类型的方法"></a>判断数据类型的方法</h3><h4 id="1-typeof-运算符"><a href="#1-typeof-运算符" class="headerlink" title="(1) typeof 运算符"></a>(1) typeof 运算符</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="number">123</span> <span class="comment">// "number"</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">'123'</span> <span class="comment">// "string"</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">false</span> <span class="comment">// "boolean"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">typeof</span> f</span><br><span class="line"><span class="comment">// "function"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span> <span class="comment">// "undefined"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> <span class="comment">// "object" ---&gt; 对于null来说是历史原因造成的，它并不是对象类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">window</span> <span class="comment">// "object"</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125; <span class="comment">// "object"</span></span><br><span class="line"><span class="keyword">typeof</span> [] <span class="comment">// "object"</span></span><br></pre></td></tr></table></figure>
<p>从上面代码可以发现，<code>typeof</code>对于基本数据类型判断还是没问题的<br>但是对于对象(狭义)与数组还是不能很好区分所以可以采用接下来的方法</p>
<h4 id="2-instanceof-运算符"><a href="#2-instanceof-运算符" class="headerlink" title="(2) instanceof 运算符"></a>(2) instanceof 运算符</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"></span><br><span class="line">o <span class="keyword">instanceof</span> <span class="built_in">Array</span> <span class="comment">// false</span></span><br><span class="line">a <span class="keyword">instanceof</span> <span class="built_in">Array</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p><a name="ar3"></a></p>
<h3 id="数值-Number"><a href="#数值-Number" class="headerlink" title="数值(Number)"></a>数值(Number)</h3><blockquote>
<p>JavaScript 语言的底层根本没有整数，所有数字都是小数（64位浮点数）。<br>由于浮点数不是精确的值，所以涉及小数的比较和运算要特别小心。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span></span><br><span class="line"><span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="number">0.3</span> / <span class="number">0.1</span></span><br><span class="line"><span class="comment">// 2.9999999999999996</span></span><br><span class="line"></span><br><span class="line">(<span class="number">0.3</span> - <span class="number">0.2</span>) === (<span class="number">0.2</span> - <span class="number">0.1</span>)</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<h4 id="特殊数值"><a href="#特殊数值" class="headerlink" title="特殊数值"></a>特殊数值</h4><ul>
<li>正零和负零</li>
<li>NaN (非数字)</li>
<li>Infinity (无穷)</li>
</ul>
<p><strong>正零</strong> 和 <strong>负零</strong> 在绝大多数场合和零是没有区别的<br>只有当其作为分母时会分别产生<code>+Infinity</code> <code>-Infinity</code></p>
<p><strong>NaN</strong> 主要出现在将字符串解析成数字出错的场合，还有一些函数运算上<br><code>0 / 0</code> 也会出现<br>它不是一种独立数据类型，只是 <strong>Number</strong> 数据类型中的特殊值<br>判断一个变量是否为此值可以采取 <code>isNaN()</code> 方法 返回一个 <code>boolean</code> 值</p>
<p><strong>Infinity</strong> 用来表示正的数值太大或负的数值太小 还一种方式 <em>非0数除以0</em>    </p>
<p>最后对于判断是否为特殊值可以采用 <code>isFinite()</code> 方法 为特殊值会返回 <code>false</code> </p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS学习(基本语法)]]></title>
      <url>/2016/JS%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>初入前端，JS作为前端三剑客中的一员，是必须要了解且精通的。<br>学习参考书：<a href="http://javascript.ruanyifeng.com/" target="_blank" rel="noopener">《JavaScript 标准参考教程（alpha）》</a>，by 阮一峰</p>
<p>此《JS学习》系列为对参考书进行学习的日志，作为本人的<em>学习笔记</em><br><a id="more"></a></p>
<hr>
<h3 id="语句-Statement-与表达式-Expression"><a href="#语句-Statement-与表达式-Expression" class="headerlink" title="语句(Statement)与表达式(Expression)"></a>语句(Statement)与表达式(Expression)</h3><blockquote>
<p>语句是为了完成某种任务而进行的操作</p>
<p>语句以分号结尾</p>
<p>表达式是指一个为了得到返回值的计算式</p>
<p>表达式以分号结尾将成为一句无意义的语句</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">3</span> + <span class="number">3</span>;  <span class="comment">// 为赋值语句， 等号右边为表达式 3 + 3</span></span><br><span class="line"></span><br><span class="line">;;;  <span class="comment">// 一行允许多个语句， 但此行三个语句前无任何内容， 为三个空语句</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span> * <span class="number">4</span>;  <span class="comment">//  此行为表达式后添加分号， 只是单纯的产生一个值 没有意义</span></span><br></pre></td></tr></table></figure>
<h3 id="变量提升-hoisting"><a href="#变量提升-hoisting" class="headerlink" title="变量提升(hoisting)"></a>变量提升(hoisting)</h3><blockquote>
<p>JavaScript 引擎的工作方式是，先解析代码，获取所有被声明的变量，然后再一行一行地运行。这造成的结果，就是所有的变量的声明语句，都会被提升到代码的头部，这就叫做变量提升（hoisting）。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*上面代码首先使用console.log方法，在控制台（console）显示变量a的值。</span></span><br><span class="line"><span class="comment">*这时变量a还没有声明和赋值，所以这是一种错误的做法，</span></span><br><span class="line"><span class="comment">*但是实际上不会报错。因为存在变量提升，真正运行的是下面的代码。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="built_in">console</span>.log(a);  <span class="comment">// 输出undefined</span></span><br><span class="line">a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 这是单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 这是</span></span><br><span class="line"><span class="comment"> 多行</span></span><br><span class="line"><span class="comment"> 注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*历史上 JavaScript 可以兼容 HTML 代码的注释，不推荐使用*/</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">1</span>; &lt;!-- x = 2;    //  '&lt;!--' 可用作单行注释，此注释任意位置</span><br><span class="line">--&gt; x = 3;		//  '--&gt;' 可用作单行注释，但此注释必须在行头</span><br><span class="line">console.log(x);  // 输出为 1</span><br></pre></td></tr></table></figure>
<h3 id="标签-label"><a href="#标签-label" class="headerlink" title="标签(label)"></a>标签(label)</h3><blockquote>
<p>JavaScript 语言允许，语句的前面有标签（label），相当于定位符，用于跳转到程序的任意位置，标签的格式如下。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">top:  <span class="comment">//  这是一个标签</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">  	<span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">  		<span class="keyword">if</span>(i === <span class="number">2</span> &amp;&amp; j === <span class="number">3</span>)</span><br><span class="line">  		  <span class="keyword">break</span> top;  <span class="comment">//  配合break使用， 当i等于2 j等于3时 直接跳出整个循环</span></span><br><span class="line">  	&#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>标签常配合<code>continue</code> <code>break</code> 使用，来跳到指定位置</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS学习(前言)]]></title>
      <url>/2016/JS%E5%AD%A6%E4%B9%A0-%E5%89%8D%E8%A8%80/</url>
      <content type="html"><![CDATA[<p>初入前端，JS作为前端三剑客中的一员，是必须要了解且精通的。<br>学习参考书：<a href="http://javascript.ruanyifeng.com/" target="_blank" rel="noopener">《JavaScript 标准参考教程（alpha）》</a>，by 阮一峰</p>
<p>此《JS学习》系列为对参考书进行学习的日志，作为本人的<em>学习笔记</em><br><a id="more"></a></p>
<hr>
<h3 id="关于JS"><a href="#关于JS" class="headerlink" title="关于JS"></a>关于JS</h3><p>JS作为一门编程语言，其核心语法是相当精简的，只包括两个部分；基本的语法构造（比如操作符、控制结构、语句）和标准库（就是一系列具有各种功能的对象比如<code>Array</code>、<code>Date</code>、<code>Math</code>等）。除此之外，各种宿主环境提供额外的 API（即只能在该环境使用的接口），以便 JavaScript 调用。以浏览器为例，它提供的额外 API 可以分成三大类：</p>
<ul>
<li>浏览器控制类：操作浏览器</li>
<li>DOM 类：操作网页的各种元素</li>
<li>Web 类：实现互联网的各种功能</li>
</ul>
<hr>
<h3 id="关于JS性能"><a href="#关于JS性能" class="headerlink" title="关于JS性能"></a>关于JS性能</h3><h4 id="1-灵活的语法，表达力强"><a href="#1-灵活的语法，表达力强" class="headerlink" title="1. 灵活的语法，表达力强"></a>1. 灵活的语法，表达力强</h4><p>JavaScript 既支持类似 C 语言清晰的过程式编程，也支持灵活的函数式编程。可以用来写并发处理（concurrent）。这些语法特性已经被证明非常强大，可以用于许多场合，尤其适用异步编程。</p>
<p>JavaScript 的所有值都是对象，这为程序员提供了灵活性和便利性。因为你可以很方便地、按照需要随时创造数据结构，不用进行麻烦的预定义。</p>
<p>JavaScript 的标准还在快速进化中，并不断合理化，并添加更适用的语法特性。</p>
<h4 id="2-支持编译运行"><a href="#2-支持编译运行" class="headerlink" title="2. 支持编译运行"></a>2. 支持编译运行</h4><p>JavaScript 语言本身，虽然是一种解释型语言，但是在现代浏览器中，JavaScript 都是编译后运行。程序会被高度优化，运行效率接近二进制程序。而且，JavaScript 引擎正在快速发展，性能将越来越好。</p>
<h4 id="3-事件驱动和非阻塞式设计"><a href="#3-事件驱动和非阻塞式设计" class="headerlink" title="3. 事件驱动和非阻塞式设计"></a>3. 事件驱动和非阻塞式设计</h4><p>JavaScript 程序可以采用事件驱动（event-driven）和非阻塞式（non-blocking）设计，在服务器端适合高并发环境，普通的硬件就可以承受很大的访问量。</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
